name: Performance Tests

on:
  schedule:
    - cron: "0 3 * * *" # Run daily at 03:00
  workflow_dispatch:

jobs:
  performance:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build backend application
        working-directory: ./viatab-backend
        run: ./mvnw clean package -DskipTests

      - name: Start backend application
        working-directory: ./viatab-backend
        run: |
          java -jar target/backend-0.0.1-SNAPSHOT.jar \
            --spring.profiles.active=test \
            --spring.datasource.url=jdbc:postgresql://localhost:5432/test_db \
            --spring.datasource.username=postgres \
            --spring.datasource.password=postgres \
            --server.port=8080 &

          # Wait for application to start
          echo "Waiting for application to start..."
          for i in {1..60}; do
            if curl -f http://localhost:8080/actuator/health > /dev/null 2>&1; then
              echo "Application is ready!"
              break
            fi
            echo "Attempt $i: Application not ready yet, waiting..."
            sleep 2
          done

      - name: Verify application is running
        run: |
          curl -f http://localhost:8080/actuator/health
          echo "Health check passed!"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Create performance test script
        run: |
          cat << 'EOF' > performance-test.js
          import http from 'k6/http';
          import { check, sleep } from 'k6';

          export let options = {
            vus: 10,
            duration: '30s',
            thresholds: {
              http_req_duration: ['p(95)<500'], // 95% of requests must complete below 500ms
              http_req_failed: ['rate<0.1'],   // Error rate must be below 10%
            },
          };

          const BASE_URL = __ENV.APP_URL || 'http://localhost:8080';

          export default function () {
            // Test health endpoint
            let healthResponse = http.get(`${BASE_URL}/actuator/health`);
            check(healthResponse, {
              'health check status is 200': (r) => r.status === 200,
              'health check response time < 200ms': (r) => r.timings.duration < 200,
            });
            
            // Test stories API
            let storiesResponse = http.get(`${BASE_URL}/api/stories`);
            check(storiesResponse, {
              'stories API status is 200': (r) => r.status === 200,
              'stories API response time < 500ms': (r) => r.timings.duration < 500,
            });
            
            sleep(1);
          }
          EOF

      - name: Run performance tests
        run: k6 run performance-test.js
        env:
          APP_URL: ${{ secrets.APP_URL || 'http://localhost:8080' }}

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: "*.json"
          retention-days: 7

      - name: Stop application
        if: always()
        run: |
          # Kill the Java application
          pkill -f "java -jar target/backend-0.0.1-SNAPSHOT.jar" || true
